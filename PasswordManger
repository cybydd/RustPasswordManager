use aes_gcm_siv::{
    aead::{Aead, KeyInit, OsRng, AeadCore},
    Aes256GcmSiv, Nonce
};
use base64::{encode, decode};
use clap::{Arg, App, SubCommand};
use rand::RngCore;
use serde::{Deserialize, Serialize};
use std::{fs, io};
use std::collections::HashMap;

const DATA_FILE: &str = "passwords.json";
const KEY_FILE: &str = "key.bin";
const NONCE_SIZE: usize = 12; // Nonce size for AES-GCM-SIV

#[derive(Serialize, Deserialize)]
struct PasswordManager {
    passwords: HashMap<String, String>,
}

impl PasswordManager {
    fn new() -> Self {
        PasswordManager {
            passwords: HashMap::new(),
        }
    }

    fn load() -> Self {
        match fs::read_to_string(DATA_FILE) {
            Ok(data) => serde_json::from_str(&data).unwrap_or_else(|_| PasswordManager::new()),
            Err(_) => PasswordManager::new(),
        }
    }

    fn save(&self) {
        let data = serde_json::to_string(&self).unwrap();
        fs::write(DATA_FILE, data).expect("Unable to save data");
    }

    fn add(&mut self, service: &str, password: &str) {
        self.passwords.insert(service.to_string(), password.to_string());
    }

    fn get(&self, service: &str) -> Option<&String> {
        self.passwords.get(service)
    }

    fn delete(&mut self, service: &str) {
        self.passwords.remove(service);
    }

    fn list(&self) {
        for service in self.passwords.keys() {
            println!("{}", service);
        }
    }
}

fn generate_key() -> [u8; 32] {
    let mut key = [0u8; 32];
    OsRng.fill_bytes(&mut key);
    fs::write(KEY_FILE, &key).expect("Unable to save encryption key");
    key
}

fn load_or_generate_key() -> [u8; 32] {
    match fs::read(KEY_FILE) {
        Ok(key) => {
            let mut key_array = [0u8; 32];
            key_array.copy_from_slice(&key);
            key_array
        }
        Err(_) => generate_key(),
    }
}

fn encrypt_password(password: &str, key: &[u8]) -> String {
    let cipher = Aes256GcmSiv::new_from_slice(key).expect("Invalid key length");
    let mut nonce = [0u8; NONCE_SIZE];
    OsRng.fill_bytes(&mut nonce);

    let ciphertext = cipher.encrypt(Nonce::from_slice(&nonce), password.as_bytes())
        .expect("Encryption failed");

    let mut encrypted_data = nonce.to_vec();
    encrypted_data.extend_from_slice(&ciphertext);

    encode(&encrypted_data)
}

fn decrypt_password(encrypted_data: &str, key: &[u8]) -> String {
    let encrypted_data = decode(encrypted_data).expect("Base64 decode failed");
    let (nonce, ciphertext) = encrypted_data.split_at(NONCE_SIZE);

    let cipher = Aes256GcmSiv::new_from_slice(key).expect("Invalid key length");

    let plaintext = cipher.decrypt(Nonce::from_slice(nonce), ciphertext)
        .expect("Decryption failed");

    String::from_utf8(plaintext).expect("Invalid UTF-8")
}

fn main() {
    let matches = App::new("Password Manager")
        .version("1.0")
        .author("Your Name <you@example.com>")
        .about("Manages passwords securely")
        .subcommand(SubCommand::with_name("add")
            .about("Adds a new password")
            .arg(Arg::with_name("service")
                .help("The service name")
                .required(true)
                .index(1))
            .arg(Arg::with_name("password")
                .help("The password")
                .required(true)
                .index(2)))
        .subcommand(SubCommand::with_name("get")
            .about("Retrieves a password")
            .arg(Arg::with_name("service")
                .help("The service name")
                .required(true)
                .index(1)))
        .subcommand(SubCommand::with_name("delete")
            .about("Deletes a password")
            .arg(Arg::with_name("service")
                .help("The service name")
                .required(true)
                .index(1)))
        .subcommand(SubCommand::with_name("list")
            .about("Lists all services"))
        .get_matches();

    let mut manager = PasswordManager::load();
    let key = load_or_generate_key();

    if let Some(matches) = matches.subcommand_matches("add") {
        let service = matches.value_of("service").unwrap();
        let password = matches.value_of("password").unwrap();
        let encrypted_password = encrypt_password(password, &key);
        manager.add(service, &encrypted_password);
        manager.save();
        println!("Password added for service: {}", service);
    } else if let Some(matches) = matches.subcommand_matches("get") {
        let service = matches.value_of("service").unwrap();
        if let Some(encrypted_password) = manager.get(service) {
            let decrypted_password = decrypt_password(encrypted_password, &key);
            println!("Password for {}: {}", service, decrypted_password);
        } else {
            println!("Service not found: {}", service);
        }
    } else if let Some(matches) = matches.subcommand_matches("delete") {
        let service = matches.value_of("service").unwrap();
        manager.delete(service);
        manager.save();
        println!("Deleted password for service: {}", service);
    } else if matches.subcommand_matches("list").is_some() {
        manager.list();
    } else {
        println!("No command given. Use --help for more information.");
    }
}
